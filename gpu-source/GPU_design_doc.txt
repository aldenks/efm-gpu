Elementary Flux Mode Analysis on the GPU
Ehsan Ullah, Diogenes Nunez, and Alden Keefe Sampson

Program Design
--------------

== Memory & Data ==
-------------------
We keep as much data on the GPU as possible to avoid overheads due to copying data back and forth.

// TODO: explain how BinaryVectors and metabolite represent pathways.

Primary pieces of data in memory
  Every pathway in the network has two important pieces of information:
    1. the reactions that are used in the pathway
    2. the equations of every reaction in that pathway

  We represent the entire network in two parallel circular buffers of pathway data:
    1. 1D Array of BinaryVectors

      A BinaryVector is an unsigned long, so 64 bits. This was chosen to simplify the problem
      for this first implementation. This means we have a hard limit of 64 reactions in a network.
      We use a bit in the BinaryVector to represent a reaction, starting at the least significant
      bit. If bit i is set, then reaction i is active in that pathway.

      For example, the below BinaryVector shows that this pathway used reactions 0, 4, 9, and 62.

      This "structure" allows us to check for dependency with two bitwise operations.

      01000000 00000000 00000000 00000000 00000000 00000000 00000010 00010001  - BinaryVector
                                                               ...98 76543210  - Indices

      Currently, we have a hard limit on the number of pathways we can hold at any given time.
      This constant is defined in Setup.h as MAX_PATHWAYS. Exceeding this number at any time
      during execution will result in undefined behavior and output. As of the time this algorithm
      was implemented, there is no known way of identified an upper bound on the number of pathways
      that can be generated throughout the procedure. Until such a bound has been found, we must
      set a manual hard limit.

    2. 2D array of Metabolite coefficients represented as floats

      Each row corresponds to a pathway and each column corresponds to a metabolite.
      Each pathway consumes and produces metabolites and can be represented as an equation.
      Cell (i, j) represents the coefficient for metabolite j in pathway i. A negative coefficient
      represents an input, positive represents output. 0 means that metabolite is not used at all.

      If we have m metabolites and n pathways, the metabolite
        coefficients look like this:
            m1   m2   m3   m4   ...  mr  ...   mm
          +----+----+----+----+----+----+----+----+
      r1  |    |    |    |    |    | 0  |    |    |
          +----+----+----+----+----+----+----+----+
      r2  |    |    |    |    |    | 2  |    |    |
          +----+----+----+----+----+----+----+----+
      r3  |    |    |    |    |    | -1 |    |    |
          +----+----+----+----+----+----+----+----+
      r4  |    |    |    |    |    | -3 |    |    |
          +----+----+----+----+----+----+----+----+
      ... |    |    |    |    |    |    |    |    |
          +----+----+----+----+----+----+----+----+
      rn  |    |    |    |    |    | 0  |    |    |
          +----+----+----+----+----+----+----+----+

      We can see that metabolite mr is an input to r3 and r4, output to r2, and does not
      participate in r1 and rn.

      Just like the array of BinaryVectors, we have a hard limit of MAX_PATHWAYS rows for the
      same reasons as before. The number of metabolites is fixed with respect to the network, so
      we do not have to worry about the number of columns.

    The macro circularIndex(i) takes an abstracted infinite index and
      maps it into the underlying array. We maintain a pathwayStartIndex
      which points to the start of the pathways in collection and
      a pathwayCount to know how many we have.

    To allow for fast indexing into the buffer, we made the buffer's length a power of 2. With this,
    we can use a bitwise and with a mask to allow for faster indexing than a modulus. The length of
    the buffer is MAX_PATHWAYS, which is made to be a power of 2.

    NOTE: If MAX_PATHWAYS must be changed,
          1) it must remain a power of 2 for fast indexing
          2) CIRCULAR_BUFFER_MASK must be updated to reflect that

  Bins
    Space for each thread to store new, independent combinations.
    Combos here are just represented with the int index of the output pathway,
      the input pathway is implicitly known (each bin is for one input pathway).
    Bins are cleared out and added to pathways after each batch.
    The first index in each bin holds the count of combos in the bin.
    Each bin is of batchSize, and there is one bin per input pathway.
    Bins are arranged out in column major order in a large 1D array:

        0    1    2    3    4    5    6   .. (n_in)-1
      +----+----+----+----+----+----+----+----+----+
      | 3  | 1  | 0  | 0  | 2  | 0  | 0  |    | 2  | ------> counts
      +----+----+----+----+----+----+----+----+----+ --+
      | 15 | 12 |    |    | 13 |    |    |    | 21 |   |
      +----+----+----+----+----+----+----+----+----+   |
      | 17 |    |    |    | 15 |    |    |    | 26 |   |
      +----+----+----+----+----+----+----+----+----+   |
      | 26 |    |    |    |    |    |    |    |    |   +--> output_indices
      +----+----+----+----+----+----+----+----+----+   |
      |    |    |    |    |    |    |    |    |    |   |
      +----+----+----+----+----+----+----+----+----+   |
      |    |    |    |    |    |    |    |    |    |   |
      +----+----+----+----+----+----+----+----+----+ --+

   For simplicty, we assumed a hard limit for the size of the entire 1D array.
   Just as with the BinaryVector array and the metabolite coefficients, we set
   a hard limit, seen in Setup.h as BIN_MAX_ENTRIES. Like before, since there is
   no upper bound to the number of pathways that can exist as the procedure goes
   on, we cannot know the maximum number of input pathways, output pathways, or
   combinations that can be generated at any given time. Therefore, we set this
   hard limit.

   BIN_MAX_ENTRIES can be changed to reflect domain knowledge or GPU hardware limits.


== Algorithm ==
---------------

First, some high level pseudo code. More Detail on each step below.

1. Find next metabolite
2. Bucket sorting inputs, outputs
3. Batch the dependency checks
  3a. Generate combo
  3b. Dependency check
  3c. Update metabolite coefficients
  3d. Add independent pathways to set of all pathways
  3e. Remove inputs and outputs


1. Find next metabolite [ SelectMetabolite.{ cu|h } ]
  The next metabolite to chosen by a heuristic which attempts to keep the number of pathways from combinatorially exploding. We chose the metabolite with the minimum product of its number of inputs and outputs.
  This is done in two parts:
  GPU: One thread per metabolite calculates the count of inputs and outputs and stores those counts at its index in d_metaboliteInputPathwayCounts and d_metaboliteOutputPathwayCounts.
  CPU: that data is copied to the CPU and the CPU picks the metabolite with the minimum product.

2. Bucket sorting inputs and output pathways [SortPathways.h, SortPathways.cu]

  Takes the circular buffer of reactions and metabolites d_reactions
  and sorts them into buckets of inputs, outputs, and non-participating
  according to a chosen metabolite.

  So an array like this, full of pathways

  +------------------------------------------------------------------+
  |                        all pathways                              |
  +------------------------------------------------------------------+

  is sorted into these three buckets with respect to one metabolite.

  +------------------------------------------------------------------+
  |    inputs        |     outputs        |     non-participating    |
  +------------------------------------------------------------------+

  Also takes the metabolite coefficients 2D array and sorts each row
  into the same buckets. Asumming we have m metabolites and n
  pathways, we have

        m1   m2   m3   m4   ...  mr  ...   mm
      +----+----+----+----+----+----+----+----+
  r1  |    |    |    |    |    | 0  |    |    |
      +----+----+----+----+----+----+----+----+
  r2  |    |    |    |    |    | 2  |    |    |
      +----+----+----+----+----+----+----+----+
  r3  |    |    |    |    |    | -1 |    |    |
      +----+----+----+----+----+----+----+----+
  r4  |    |    |    |    |    | -3 |    |    |
      +----+----+----+----+----+----+----+----+
  ... |    |    |    |    |    |    |    |    |
      +----+----+----+----+----+----+----+----+
  rn  |    |    |    |    |    | 0  |    |    |
      +----+----+----+----+----+----+----+----+

  become this after sorting

        m1   m2   m3   m4   ...  mr  ...   mm
      +----+----+----+----+----+----+----+----+  ---+
  r4  |    |    |    |    |    | -3 |    |    |     |
      +----+----+----+----+----+----+----+----+     +--> inputs
  r3  |    |    |    |    |    | -1 |    |    |     |
      +----+----+----+----+----+----+----+----+  ---+
  r2  |    |    |    |    |    | 2  |    |    |  ------> outputs
      +----+----+----+----+----+----+----+----+  ---+
  r1  |    |    |    |    |    | 0  |    |    |     |
      +----+----+----+----+----+----+----+----+     |
  ... |    |    |    |    |    |    |    |    |     +---> non-part
      +----+----+----+----+----+----+----+----+     |
  rn  |    |    |    |    |    | 0  |    |    |     |
      +----+----+----+----+----+----+----+----+  ---+

  ASSUMPTIONS: 1) Number of inputs and outputs correspond to the given metabolite.
               2) All indices passed into the kernel ARE with respect to the circular
                  buffer.

  GUARANTEES:  Both d_binaryVectors and d_metaboliteCoefficients are sorted into
               input, output, non-participating buckets with each index into
               d_binaryVectors corresponding to the same row in d_metaboliteCoefficients.

  Process / Algorithm:
    Given the metabolite to remove, mr, we know:
       1) mr is an input to a pathway if its metabolite coefficient in that pathway
          is negative
       2) mr is an output to a pathway if its metabolite coefficient in that pathway
          is positive


    So we launch two kernels in the following order
       - one that sorts all pathways into inputs and others        (sortInputPathways)
       - one that sorts non-input pathways into outputs and others (sortOutputPathways)

    Both kernels use a single thread to perform bucket sorting from a given starting
    point and for a given number of pathways.

  Debugging:
    To help with debugging, there is a third (private) function called checkSorting()
    that will print to stderr all the pathways and whether they are
       1) input, represented by -1
       2) output, represented by 1
       3) non-participating, represented by 0
    Note that this kernel is NOT parallelized. It can be, but there was no demand
    for that much speedup.

  Future Work:
    Try a different sort, preferably one that can follow a reduction model to take
    advantage of the massive parallelization.


3. Batch the dependency checks [ EFMGenerator.{ cu|h } ]
    Due to memory constraints, we batch our combo generation and dependency checking.Batches break up the output pathways into chunks and process one chunk with an input per batch.

3a. Generate Combinations [SortPathways.h, SortPathways.cu]
    All the possible input output combinations are generated and after dependency test only independent combinations are stored.

3b. Dependency Checking : [SortPathways.h, SortPathways.cu]

  Takes the array of binary vectors ordered into inputs, outputs,
  and non-participating. Generates combinations by combining one input
  from inputs with one output from outputs and checks dependency against
  all binary vectors in this array, save the input and output used to create
  the combo.

  +------------------------------------------------------------------+
  |    inputs        |     outputs        |     non-participating    |
  +------------------------------------------------------------------+

  Definition: Pathway p1 is dependent on pathway p2 iff
                1) p1 == p2 OR
                2) every bit set in p2 is also set in p1

  Independent combos are written in bins, where each column is a bin for a particular
  input. The first row has the number of output indices listed in the bin.
  The rest of the rows contain output indices. Below we have a sample output bin
  when processing n_in inputs.

        0    1    2    3    4    5    6   .. (n_in)-1
      +----+----+----+----+----+----+----+----+----+
      | 3  | 1  | 0  | 0  | 2  | 0  | 0  |    | 2  | ------> counts
      +----+----+----+----+----+----+----+----+----+ --+
      | 15 | 12 |    |    | 13 |    |    |    | 21 |   |
      +----+----+----+----+----+----+----+----+----+   |
      | 17 |    |    |    | 15 |    |    |    | 26 |   |
      +----+----+----+----+----+----+----+----+----+   |
      | 26 |    |    |    |    |    |    |    |    |   +--> output_indices
      +----+----+----+----+----+----+----+----+----+   |
      |    |    |    |    |    |    |    |    |    |   |
      +----+----+----+----+----+----+----+----+----+   |
      |    |    |    |    |    |    |    |    |    |   |
      +----+----+----+----+----+----+----+----+----+ --+

  ASSUMPTIONS: 1) The bin is considered zeroed out at the beginning of
                  every call to this function. Any previous input is not guaranteed
                  to still be there when this function returns.
               2) The number of columns is exactly numInputs and will be treated as
                  such.
               3) The number of rows is exactly batchSize and will be treated as such.
               4) All indices passed into the kernel do NOT consider the circular
                  buffer except for the start of pathways, pathwayStartIndex. Instead,
                  they correspond to an "infinite" length array. In other words, they
                  do not consider buffer at all.

  GUARANTEES:  1) This function does NOT write back into the d_binaryVectors array.
               2) The indices stored in the bins correspond to the circular buffer.

  Process / Algorithm:
     dependencyCheck() calls a single kernel of the same name with as many threads
     as there are inputs and a batch size of batchSize. Each thread does the following:

     - count of independent combos := 0
     - input := input reaction corresponding to thread ID
     - for each output in the batch :
       - combo := input | output
       - for each pathway in the binary vector array :
         - if index of pathway is index of input, skip
         - if index of pathway is index of output, skip
         - if pathway is combo, not independent
         - check dependency of combo on pathway
       - if independent :
         - increment count of independent combos
         - write index of output into the bin

     Note that we skip 2 pathways, one that shares the same INDEX as the input, and one
     that shares the same INDEX as the output. A combo can be dependent if the same input
     is stored twice in the array and we must represent that.


3c. Update metabolite coefficients [GenerateCombos.h, GenerateCombos.cu]

  Updates metabolite coefficients of generated independent combinations.
  Takes the bins array and generate combinations of independent pathways in the
  bins. A thread is assigned to an input and that input is combined with outputs
  specified in the corresponding bin.
 
  ASSUMPTIONS: 1) The number of threads is exactly numInputs and will be treated as
                  such.

  Process / Algorithm:
    generateCombinations() CPU function
     - Computes the starting index of new combinations for each bin
     - Calls generateCombinations() kernel to generate combinations
     - Returns total number of new combinations generated


    generateCombinations() kernel
     - inputIndex := index of the input in circular buffer corresponding to current thread
     - input := input pahtway in circular buffer
     - writeIndex := index of new combination in circular buffer corresponding to current thread
     - for each ouput in a bin
       - outputIndex := index of the output in bin corresponding to current thread
       - binaryReactions[writeIndex] := input | binaryReactions[outputIndex]
       - compute scaling factor for the new combination
       - compute metabolite coefficients for the new pathway

3d. Add independent pathways to set of all pathways
  New combinations are stored after the non-participating pathways and pathway count is updated to incporate independent pathways to the set of all pathways.

3e. Remove inputs and outputs
  Because input and output pathways are sorted to the beginning, we can "delete" them in constant time by adding the counts of input and output pathways to pathwayStartIndex.
